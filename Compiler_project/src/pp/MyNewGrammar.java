/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package pp;

public class MyNewGrammar implements MyNewGrammarConstants {

public static StringBuffer outputs = new StringBuffer("");
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter :\u005cn");
      try
      {
        switch (MyNewGrammar.one_line())
        {
          case 0 :
          System.out.println("Parsing Correctly. Here's your outputs.....");
          System.out.println(outputs.toString());
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int one_line() throws ParseException {
  System.out.println();
    jj_consume_token(GRAPH);
                                         outputs.append("\u005cn" + "result");
    jj_consume_token(20);
                                                 outputs.append(getToken(0));
    studentid();
    jj_consume_token(21);
                                                 outputs.append(getToken(0));
    jj_consume_token(22);
                                                 outputs.append(getToken(0));
    jj_consume_token(INPUTS);
                                         outputs.append(getToken(0));
    jj_consume_token(23);
                                                 outputs.append(getToken(0));
    jj_consume_token(24);
                                                 outputs.append(getToken(0));
    jj_consume_token(25);
                                                 outputs.append(getToken(0));
    jj_consume_token(22);
                                                 outputs.append(getToken(0));
    jj_consume_token(OUTPUTS);
                                         outputs.append(getToken(0));
    jj_consume_token(23);
                                                 outputs.append(getToken(0));
    jj_consume_token(26);
                                                 outputs.append("\u005cn" + getToken(0) + "\u005cn");
    code();
    jj_consume_token(27);
                                                 outputs.append("\u005cn" + getToken(0));
          {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void studentid() throws ParseException {
    label_1:
    while (true) {
      jj_consume_token(REAL_NUMBER);
                    outputs.append(getToken(0));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL_NUMBER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void code() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL_NUMBER:
    case ALPHABET:
      variable_name();
      jj_consume_token(EQUAL);
                                 outputs.append(" " + getToken(0) + " ");
      function();
      jj_consume_token(28);
                                 outputs.append("\u005cn");
      code();
      break;
    case OUTPUTS:
      jj_consume_token(OUTPUTS);
                         outputs.append(getToken(0));
      jj_consume_token(EQUAL);
                                 outputs.append(getToken(0));
      function();
      jj_consume_token(28);
                                 outputs.append("\u005cn");
      break;
    case 29:
      jj_consume_token(29);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void variable_name() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL_NUMBER:
        jj_consume_token(REAL_NUMBER);
                   outputs.append(getToken(0));
        break;
      case ALPHABET:
        jj_consume_token(ALPHABET);
                 outputs.append(getToken(0));
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REAL_NUMBER:
      case ALPHABET:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void function() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESHAPE:
      jj_consume_token(RESHAPE);
                         outputs.append("tf.reshape(");
      jj_consume_token(INPUTS);
                                 outputs.append(getToken(0));
      jj_consume_token(COMMA);
                                 outputs.append(getToken(0) + " ");
      jj_consume_token(20);
                                 outputs.append(getToken(0));
      array();
      jj_consume_token(21);
                                 outputs.append(getToken(0));
      jj_consume_token(23);
                                 outputs.append(getToken(0));
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
                         outputs.append("tf.Variable(tf.random_normal(");
      jj_consume_token(20);
                                 outputs.append(getToken(0));
      array();
      jj_consume_token(21);
                                 outputs.append(getToken(0));
      jj_consume_token(23);
                                 outputs.append("))");
      break;
    case CONV:
      jj_consume_token(CONV);
                                 outputs.append("tf.nn.conv2d(");
      variable_name();
      jj_consume_token(23);
                                 outputs.append(getToken(0));
      break;
    case ADD:
      jj_consume_token(ADD);
                                 outputs.append("tf.add(");
      variable_name();
      jj_consume_token(COMMA);
                                 outputs.append(getToken(0) + " ");
      variable_name();
      jj_consume_token(23);
                                 outputs.append(getToken(0));
      break;
    case RELU:
      jj_consume_token(RELU);
                                 outputs.append("tf.nn.relu(");
      variable_name();
      jj_consume_token(23);
                                 outputs.append(getToken(0));
      break;
    case MAX_POOL:
      jj_consume_token(MAX_POOL);
                         outputs.append("tf.nn.max_pool(");
      variable_name();
      jj_consume_token(23);
                                 outputs.append(getToken(0));
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void array() throws ParseException {
    jj_consume_token(REAL_NUMBER);
                                         outputs.append(getToken(0));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
                                                 outputs.append(getToken(0));
      jj_consume_token(REAL_NUMBER);
                                         outputs.append(getToken(0));
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x20054000,0x50000,0x50000,0xfc0,0x8000,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
